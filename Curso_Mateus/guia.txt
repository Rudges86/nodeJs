1→ Simples aplicação web básico
const http = require("http");

const porta = 3000;

const server = http.createServer((req,res)=>{
    res.write("Olá HTTP");
    res.end();
})

server.listen(porta,()=>{
    console.log(`Servidor iniciado na porta: http://localhost:${porta}`)
})

2→ Enviando html na resposta, e enviando código de status
    const http = require("http");
    const porta = 3000;

    const server = http.createServer((req,res)=>{
        res.statusCode = 200;  -> aqui seta o código de status, nesse caso foi o 200
        res.setHeader("Content-Type","text/html"); -> aqui informa o tipo e o que ele aceita, no caso text/html
        res.end("<h1>Enviando html</h1>"); -> escrevendo o html
        
    }).listen(porta,()=>{
        console.log(`Server rodando na porta: http://localhost:${porta}`);
    });


3→ Módulo url
    Serve para decompor uma url, podendo resgatar vários itens como: host,path,params e etc.
    Podendo alterar a lógica do código a partir destas informações.
    
    const url = require("url");
    const address = 'http://www.meusite.com.br/catalogo?produtos=cadeira';
    const parseUrl = new url.URL(address);

    console.log(parseUrl.host);
    console.log(parseUrl.pathname);
    console.log(parseUrl.search);
    console.log(parseUrl.searchParams);
    console.log(parseUrl.searchParams.get("produtos"));

    SAÍDA  
    ↓↓↓↓↓
    www.meusite.com.br
    /catalogo
    ?produtos=cadeira
    URLSearchParams { 'produtos' => 'cadeira' }
    cadeira

4 → Unindo url e http
const http = require("http");

const porta = 3000;
const server = http.createServer((req,res)=>{
    //url
    const urlInfo = require("url").parse(req.url,true);
    const name = urlInfo.query.name; //pega o parâmetro da url com name

    //caminho normal do servidor
    res.statusCode = 200;
    res.setHeader("Content-Type","text/html");

    if(!name){ //Inícia vazio ai ele já constrói o formulário, pelo o seu método ser get e o submite,
               //ele passa o name do input na url;
         res.end(
        "<h1>Preencha o seu nome:</h1> <form method='GET'><input type:'text' name='name'/><input type='submit' value='Enviar'/></form>");
    }else{
        //quando o parâmetro é preenchido ele retorna essa lógica, ficando a url desta forma:
        //localhost:3000/?name=
        res.end(`<h1>Seja bem-vindo ${name} !!</h1>`)
    }

}).listen(porta,()=>{
    console.log(`Servidor rodando na porta: http://localhost:${porta}`)
})


5 → Lendo um documento html por fs e renderizando.

    const fs = require("fs"); → importe do fs;
    const http = require("http"); → Importe do http;

    const porta = 3000; → Porta
    const server = http.createServer((req,res)=>{ 
        //Lê o arquivo html
        fs.readFile("mensagem.html",(error,data)=>{
            //Substitui o res.statusCode e o res.setHeader       
            res.writeHead(200,{"Content-Type": "text/html"});
            //Vai escrever o que está no arquivo ai
            res.write(data);
            return res.end();
            
        });

    }).listen(porta,()=>{
        console.log(`Servidor rodando na porta: http://localhost:${porta}`);
    })

    6 → Lendo e escrevendo em arquivo via html
        const fs = require("fs");
        const http =  require("http");
        const porta = 3000;

        const server = http.createServer((req,res)=>{

        const urlInfo = require("url").parse(req.url,true); //importe da url, e lendo a url
        const nome = urlInfo.query.nome; //lendo o parâmetro

        if(!nome){
            fs.readFile("index.html",(error,data)=>{
                res.writeHead(200,{"Content-Type":"text/html"}) //renderizando o html já criado
                res.write(data);
                return res.end();
                })
        }else{
            fs.writeFile("arquivo.txt",nome, function (err,data){ //criando e escrevendo no arquivo.txt
                //Detalhe, toda vez ele irá substituir o arquivo e escrever por cima.
                //Detalhe ele não aceita arrow function, tem que passar o nome function mesmo
                res.writeHead(302,{
                    Location:"/" //devolvendo para a mesma página
                })
                    return res.end();
                })
            }

        }).listen(porta,()=>{
        console.log(`Servidor rodando em: http://localhost:${porta}`);
    })
07 → Atualizando arquivos

  const fs = require("fs");
        const http =  require("http");
        const porta = 3000;

        const server = http.createServer((req,res)=>{

        const urlInfo = require("url").parse(req.url,true); //importe da url, e lendo a url
        const nome = urlInfo.query.nome; //lendo o parâmetro

        if(!nome){
            fs.readFile("index.html",(error,data)=>{
                res.writeHead(200,{"Content-Type":"text/html"}) //renderizando o html já criado
                res.write(data);
                return res.end();
                })
        }else{
            **************** O pulo do gato está aqui,

            →Crie uma const com o que vai receber o query e adicionado o a quebra de linha←
            const nameNewLine = nome + "\r\n";

            →Substitua o fs.writeFile por fs.appendFile←
            //fs.appendFile("arquivo.txt",nome, .....
            → Substitua o nome pela const criada ←
            fs.appendFile("arquivo.txt",nameNewLine, function (err,data){ //criando e escrevendo no arquivo.txt
                //Detalhe, toda vez ele irá substituir o arquivo e escrever por cima.
                //Detalhe ele não aceita arrow function, tem que passar o nome function mesmo
                res.writeHead(302,{
                    Location:"/" //devolvendo para a mesma página
                })
                    return res.end();
                })
            }

        }).listen(porta,()=>{
        console.log(`Servidor rodando em: http://localhost:${porta}`);
    })

08 → Removendo arquivos
    const fs = require("fs");

    fs.unlink('arquivo.txt',function(error){ → esse é o cara responsável por remover o arquivo, mas só remove se ele existir
        if(error){
            console.log(error);
            return ;
        }
        console.log("Arquivo removido");
    })